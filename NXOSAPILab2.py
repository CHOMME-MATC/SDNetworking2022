'''
Date: 2/28/21
Author: Chance Homme

This script is responsible for sending user specified input to the dist-sw01 device using the NXAPI to push changes to the device
such as hostname. This script also asks a user for an ip address and adds two to the third octet and prints the new ip address out

'''

import requests # import statements responsible for importing the request and json libraries
import json 


def userInput(prompt, answerList): #User input function

    answer = input(prompt) #variable that tracks the users input according to the prompt that was passed to the function.

    while answer not in answerList: #while loop that will return the initial inpuy prompt if the users answer is not valid 
        print('Please respond using a valid answer.')
        answer = input(prompt)
    
    return answer #The answer will be returned once a valid answer is entered.



def validHostname(hostname): #Function validating user input hostname
    validHost = False #Flag measuring if the hostname is valid or not

    #If statement Checking for alpha characters in the first character of the hostname, no spaces in the hostname,
    #and hostname for 64 or less characters.
    if hostname[0].isalpha() == True and hostname.count(' ') == 0 and len(hostname) <= 64:
        validHost = True
    else:
        validHost = False 
                        
    return validHost # validHost returned to main for further use



def cliCallHost(userHN): # function sending the conf t and hostname commands, userHN is used to send the user specified hostname to the switch

    switchuser='cisco' # switchuser contains the string value of the username for the switch user account
    switchpassword='cisco' # switchpassword contains the string value of the password for the switch user account

    url='https://10.10.20.177/ins' # url contains the string value of the destination url for the api request
    myheaders={'content-type':'application/json-rpc'} # my headers, payload, and response were auto generated by the NEXOS api to create an API call
                                                      # that issues the conf t and hostname command on the switch using the destination url, userHN
                                                      # was added to the hostname command to pass the user specified hostname passed from
                                                      # main.
    payload=[
      {
        "jsonrpc": "2.0",
        "method": "cli",
        "params": {
          "cmd": "conf t",
          "version": 1
        },
        "id": 1
      },
      {
        "jsonrpc": "2.0",
        "method": "cli",
        "params": {
          "cmd": "hostname " + userHN,
          "version": 1
        },
        "id": 2
      }
    ]

    print(payload[1]) #test print statement printing the contents of the second command
    
    # response was edited to include verify = False to circumvent the default certification validation
    response = requests.post(url,data=json.dumps(payload), verify=False, headers=myheaders,auth=(switchuser,switchpassword)).json()

    print(response) # test print statement printing the response of what was sent to the device


def validIP(IP): #Function validating user input ip
    validIP = True #Flag measuring if the ip is valid or not

    if IP.count('.') != 3: #if loop measuing the ammount of decimals in the ip for proper formatting
        validIP = False

    ipCheck = IP.split('.') #variable that splits the ip on the decimals for easier handling of octets
    
    octetList = [] #empty list which will contain octets
    
    if len(ipCheck) !=4: #if loop stating that if the ammount of octets is not equal to four, the valid flag will be set false
        validIP = False
    
    for octet in ipCheck: #for loop iterating through all items in ipCheck
        octetList.append(octet)
        if octet.isnumeric() == False: #if statement checking if the octet string is strictly numeric
            validIP = False
            return validIP
        if int(octet) < 0 or int(octet) > 255: # if statement verifying that the octets are in the valid range for ipv4 addresses
            validIP = False
        if int(octetList[0]) == 0: # if statement ensuring that the first octet is not equal to zero
            validIP = False
        
    return validIP # validIP returned to main for further use


def addTwoToThird(validIP): # function responsible for adding two to the third octet

    splitIP = validIP.split('.') # split ip will split the user defined ip on the periods

    octetList = [] # octetList is an empty list used to store the octets of the user defined ip

    for octet in splitIP: # for loop adding each octet in its integer form to the octetList

        octetList.append(int(octet))


    octetList[2] = octetList[2] + 2 # statement changing the value of the third octet by adding two to the integer value of the third octet

    modifiedIP = '' # modifiedIP is created as an empty string to be later modified

    for octet in octetList: # for loop adding the string value of each octet and a period to the modifiedIP string
        
        modifiedIP = modifiedIP + str(octet) + '.'
    
    modifiedIP = modifiedIP.rstrip('.') # statement stripping out the final period of the ip address using the rstrip function

    return modifiedIP # modifiedIP is returned to main for further use
        





#main code

print('The selected device for configuration is: dist-sw01', '\n') # print statement showing what device will be configured

askForHost = userInput('Would you like to configure a new hostname? [Y or N] ', ['Y','y','N','n']) # askForHost will ask the user if 
                                                                                                   # they would like to change the hostname using
                                                                                                   # the userInput function

if askForHost.lower() == 'y': # if the user would like to change the hostname, the following will occur

    userHost = input('Please enter the new hostname: ') # userHost is created to store the value of the user specified hostname

    validateHost = validHostname(userHost) # validateHost is used to validate the hostname for use on the cisco device


    while validateHost == False: # as long as the Hostname is not valid, an error statement will print out and the user will be prompted to enter
                                 # a valid hostname which will be checked using the validateHost variable
            
        print('The entered hostname is not valid')

        userHost = input('Please enter the new hostname: ')

        validateHost = validHostname(userHost)
        

    if validateHost == True: # if the hostname is valid, the hostname is passed to the cliCallHost function and the hostname is changed on the switch

        cliCallHost(userHost)

if askForHost.lower() == 'n': # if the user doesnt want to change the hostname then a print statement will be used to indicate no changes were made

    print('No changes to the hostname were made.')


askForIP = userInput('Would you like to add a new IP address? [Y or N] ', ['Y','y','N','n']) # askForIP is used to ask the user if they want to add a faux ip address

if askForIP.lower() == 'y': # if the user wants to add a faux ip address, the following will occur:

    userIP = input('Please enter the new IP address (x.x.x.x format): ') # userIP is used to store the value of the user specified IP address
    validateIP = validIP(userIP) # validateIP is used to validate the user specified IP address
    

    while validateIP == False: # as long as the IP is not valid, an error statement will print out and the user will be prompted to enter
                               # a valid IP which will be checked using the validateIP variable
            
        print('The entered IP address is not valid')

        userIP = input('Please enter the new IP address: ')

        validateIP = validIP(userIP)

    if validateIP == True: # if the IP is valid then the IP address will be passed to addValue, which will add two to the third octet of the user
                           # specified IP

        addValue = addTwoToThird(userIP)
        print('User specified IP: ', str(userIP))
        print('User specified IP with two added to the third octet: ', addValue)
        


if askForIP.lower() == 'n': # if the user doesnt want to add a faux IP, a print statement will indicate no new IP addresses were specified
    
    print('No new IP addresses were configured.')

